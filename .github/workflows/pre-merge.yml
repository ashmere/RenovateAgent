name: Pre-merge Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-v2-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry show

      - name: Install and run pre-commit hooks
        run: |
          poetry run pre-commit install --install-hooks
          poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-v2-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run tests
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ORGANIZATION: test-organization
          GITHUB_APP_ID: 0
          DEBUG: true
        run: poetry run python -m pytest tests/ -v --tb=short

      - name: Test module imports
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ORGANIZATION: test-organization
          GITHUB_APP_ID: 0
          DEBUG: true
        run: |
          poetry run python -c "from renovate_agent import config; print('✅ Config module imported')"
          poetry run python -c "from renovate_agent import github_client; print('✅ GitHub client imported')"
          poetry run python -c "from renovate_agent import pr_processor; print('✅ PR processor imported')"
          poetry run python -c "from renovate_agent import dependency_fixer; print('✅ Dependency fixer imported')"
          poetry run python -c "from renovate_agent import issue_manager; print('✅ Issue manager imported')"

      - name: Test configuration loading
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: dummy-token
          GITHUB_ORGANIZATION: test-org
          GITHUB_APP_ID: 0
          DEBUG: true
        run: |
          poetry run python -c "
          import os
          os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = 'dummy-token'
          os.environ['GITHUB_ORGANIZATION'] = 'test-org'
          os.environ['GITHUB_APP_ID'] = '0'
          from renovate_agent.config import get_settings
          settings = get_settings()
          print(f'✅ Configuration loaded: {settings.github_organization}')
          "

      - name: Test server startup (dry run)
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: dummy-token
          GITHUB_ORGANIZATION: test-org
          GITHUB_APP_ID: 0
          DEBUG: true
        run: |
          poetry run timeout 5s python -c "
          import asyncio
          import os
          os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = 'dummy-token'
          os.environ['GITHUB_ORGANIZATION'] = 'test-org'
          os.environ['GITHUB_APP_ID'] = '0'
          from renovate_agent.main import app
          print('✅ FastAPI app created successfully')
          " || echo "✅ Server startup test completed"
