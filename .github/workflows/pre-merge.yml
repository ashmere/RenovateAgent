name: Pre-merge Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"

      - name: Check if tests exist
        id: check-tests
        run: |
          if [ -d "tests" ] && [ "$(find tests -name '*.py' -type f | wc -l)" -gt 0 ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Test directory found with Python files"
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No tests directory or test files found"
          fi

      - name: Run unit tests
        if: steps.check-tests.outputs.tests_exist == 'true'
        run: |
          # Run unit tests with coverage
          pytest tests/ \
            -v \
            --tb=short \
            -m "not integration and not slow" \
            --maxfail=5 \
            --cov=renovate_agent \
            --cov-report=term-missing \
            --cov-report=xml
        env:
          # Mock environment variables for testing
          GITHUB_APP_ID: "0"
          GITHUB_PERSONAL_ACCESS_TOKEN: "test-token"
          GITHUB_ORGANIZATION: "test-org"
          DEBUG: "true"

      - name: Run basic import tests
        run: |
          # Test that core modules can be imported
          python -c "
          import sys
          sys.path.insert(0, 'src')

          # Test basic imports
          try:
              from renovate_agent import config
              print('‚úÖ Config module imported successfully')
          except Exception as e:
              print(f'‚ùå Config import failed: {e}')
              sys.exit(1)

          try:
              from renovate_agent import github_client
              print('‚úÖ GitHub client module imported successfully')
          except Exception as e:
              print(f'‚ùå GitHub client import failed: {e}')
              sys.exit(1)

          try:
              from renovate_agent import pr_processor
              print('‚úÖ PR processor module imported successfully')
          except Exception as e:
              print(f'‚ùå PR processor import failed: {e}')
              sys.exit(1)

          try:
              from renovate_agent.dependency_fixer import factory
              print('‚úÖ Dependency fixer modules imported successfully')
          except Exception as e:
              print(f'‚ùå Dependency fixer import failed: {e}')
              sys.exit(1)

          print('‚úÖ All basic imports successful')
          "

      - name: Test configuration loading
        run: |
          # Test that configuration can be loaded without errors
          python -c "
          import sys
          sys.path.insert(0, 'src')
          import os

          # Set test environment variables
          os.environ['GITHUB_APP_ID'] = '0'
          os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = 'test-token'
          os.environ['GITHUB_ORGANIZATION'] = 'test-org'
          os.environ['DEBUG'] = 'true'

          from renovate_agent.config import get_settings

          try:
              settings = get_settings()
              print('‚úÖ Configuration loaded successfully')
              print(f'   GitHub org: {settings.github_organization}')
              print(f'   Debug mode: {settings.debug}')
              print(f'   Development mode: {settings.is_development_mode}')
          except Exception as e:
              print(f'‚ùå Configuration loading failed: {e}')
              sys.exit(1)
          "

      - name: Test FastAPI app creation
        run: |
          # Test that FastAPI app can be created
          python -c "
          import sys
          sys.path.insert(0, 'src')
          import os

          # Set test environment variables
          os.environ['GITHUB_APP_ID'] = '0'
          os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = 'test-token'
          os.environ['GITHUB_ORGANIZATION'] = 'test-org'
          os.environ['DEBUG'] = 'true'

          try:
              from renovate_agent.main import app
              print('‚úÖ FastAPI app created successfully')
              print(f'   App title: {app.title}')
          except Exception as e:
              print(f'‚ùå FastAPI app creation failed: {e}')
              sys.exit(1)
          "

      - name: Run dry-mode integration tests
        run: |
          # Run scripts in dry mode to test integrations
          echo "üß™ Running dry-mode integration tests..."

          # Test GitHub connection (dry mode)
          python -c "
          import sys
          sys.path.insert(0, 'scripts')
          sys.path.insert(0, 'src')
          import os

          # Set test environment variables
          os.environ['GITHUB_APP_ID'] = '0'
          os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = 'test-token'
          os.environ['GITHUB_ORGANIZATION'] = 'test-org'
          os.environ['DEBUG'] = 'true'

          try:
              # Test that the GitHub connection script can be imported
              import test_github_connection
              print('‚úÖ GitHub connection test script imported successfully')
          except Exception as e:
              print(f'‚ö†Ô∏è GitHub connection test import failed: {e}')
              # Not failing CI for this as it might need real credentials
          "

      - name: Validate project structure
        run: |
          # Check that required files and directories exist
          echo "üîç Validating project structure..."

          required_files=(
            "pyproject.toml"
            "requirements.txt"
            "src/renovate_agent/__init__.py"
            "src/renovate_agent/main.py"
            "src/renovate_agent/config.py"
            "src/renovate_agent/github_client.py"
            "src/renovate_agent/pr_processor.py"
            "src/renovate_agent/webhook_listener.py"
            "src/renovate_agent/issue_manager.py"
          )

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

          echo "‚úÖ Project structure validation passed"

      - name: Upload coverage reports
        if: steps.check-tests.outputs.tests_exist == 'true'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
