# GitHub workflow for building and pushing multi-architecture Docker images
#
# Tagging Strategy:
# - Manual dispatch: {pyproject_version}-dev + dev (e.g., 0.5.1-dev, dev)
# - Push to main: {pyproject_version}-dev-{short_sha} + dev (e.g., 0.5.1-dev-abc1234, dev)
# - Push tag: {tag_name} + stable + latest (e.g., 0.6.0, stable, latest)
#
# Version Management:
# After releasing a tag (e.g., v0.6.0), manually bump pyproject.toml to next patch version (0.6.1)
# This ensures dev builds never conflict with released stable versions
name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Validate semantic version for tags
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Validating tag: $TAG_NAME"

          # Check if tag follows semantic versioning (vX.Y.Z)
          if [[ ! $TAG_NAME =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "❌ Tag '$TAG_NAME' does not follow semantic versioning (vX.Y.Z)"
            echo "Examples of valid tags: v1.0.0, v2.1.3, v0.5.1"
            exit 1
          fi

          echo "✅ Tag '$TAG_NAME' is valid semantic version"
          echo "CLEAN_VERSION=${TAG_NAME#v}" >> $GITHUB_ENV

      - name: Extract version from pyproject.toml
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: get_version
        run: |
          VERSION=$(poetry version --short)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version from pyproject.toml: $VERSION"

      - name: Generate Docker tags and labels
        id: meta
        run: |
          TAGS=""
          LABELS=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch: version-dev + dev
            VERSION="${{ steps.get_version.outputs.version }}"
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-dev"
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev"
            echo "build_type=development" >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION}-dev" >> $GITHUB_OUTPUT

          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Push to main: version-dev-sha + dev
            VERSION="${{ steps.get_version.outputs.version }}"
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-dev-${SHORT_SHA}"
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev"
            echo "build_type=development" >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION}-dev-${SHORT_SHA}" >> $GITHUB_OUTPUT

          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag push: clean version + stable + latest (only for stable releases)
            VERSION="${{ env.CLEAN_VERSION }}"
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"

            # Only add 'latest' for stable releases (not pre-release tags)
            if [[ ! "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
              echo "latest_tag=true" >> $GITHUB_OUTPUT
            else
              echo "latest_tag=false" >> $GITHUB_OUTPUT
              echo "⚠️  Pre-release tag detected, skipping 'latest' tag"
            fi

            echo "build_type=stable" >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION}" >> $GITHUB_OUTPUT
          fi

          # Set outputs
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

          # Generate labels
          echo "labels<<EOF" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.title=Renovate PR Assistant" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.description=Intelligent automation for Renovate dependency update PRs" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.source=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.version=${{ steps.meta.outputs.version_tag }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.revision=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.licenses=MIT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to Container Registry
        if: inputs.push_to_registry != false
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.push_to_registry != false }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ steps.meta.outputs.build_type }}
          cache-to: type=gha,mode=max,scope=${{ steps.meta.outputs.build_type }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version_tag }}

      - name: Generate artifact attestation
        if: inputs.push_to_registry != false && steps.meta.outputs.build_type == 'stable'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Output build summary
        run: |
          echo "🐳 Docker Image Built Successfully!"
          echo ""
          echo "📋 Build Details:"
          echo "  Build Type: ${{ steps.meta.outputs.build_type }}"
          echo "  Trigger: ${{ github.event_name }}"
          echo "  Registry: ${{ env.REGISTRY }}"
          echo "  Image: ${{ env.IMAGE_NAME }}"
          echo "  Version: ${{ steps.meta.outputs.version_tag }}"
          echo "  Platforms: linux/amd64, linux/arm64"
          echo "  Push to registry: ${{ inputs.push_to_registry != false }}"
          echo ""
          echo "🏷️  Generated tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
          echo ""

          if [[ "${{ steps.meta.outputs.build_type }}" == "stable" ]]; then
            echo "🎉 Stable Release Information:"
            echo "  Git Tag: ${{ github.ref_name }}"
            echo "  Version: ${{ steps.meta.outputs.version_tag }}"
            if [[ "${{ steps.meta.outputs.latest_tag }}" == "true" ]]; then
              echo "  Latest Tag: ✅ Applied"
            else
              echo "  Latest Tag: ⏭️  Skipped (pre-release)"
            fi
            echo ""
            echo "📝 Next Steps:"
            echo "  1. Verify release in GitHub Container Registry"
            echo "  2. Update pyproject.toml version to next patch (e.g., ${{ steps.meta.outputs.version_tag }} → $(echo ${{ steps.meta.outputs.version_tag }} | awk -F. '{print $1"."$2"."($3+1)}'))"
            echo "  3. Commit version bump to main branch"
          elif [[ "${{ steps.meta.outputs.build_type }}" == "development" ]]; then
            echo "🚧 Development Build Information:"
            echo "  Source: ${{ github.ref_name }}"
            echo "  Version: ${{ steps.meta.outputs.version_tag }}"
            echo ""
          fi

          if [[ "${{ inputs.push_to_registry != false }}" == "true" ]]; then
            echo "🚀 Images available at:"
            echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
          else
            echo "ℹ️  Images built but not pushed (push_to_registry=false)"
          fi
