#!/usr/bin/env python3
"""
Comprehensive development setup script for RenovateAgent.

This script helps set up local testing environment with support for:
- Native Python development (poetry)
- Docker Compose standalone mode (recommended)
- Both interactive and non-interactive modes

Supports GitHub CLI authentication or guides you through creating a Personal Access Token.
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List


def get_github_token_from_cli():
    """Get GitHub token from gh CLI if available."""
    try:
        result = subprocess.run(
            ["gh", "auth", "token"], capture_output=True, text=True, check=True
        )
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None


def validate_github_access(token, org):
    """Validate GitHub token and organization access."""
    try:
        import requests

        headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json",
        }

        # Test basic authentication
        response = requests.get("https://api.github.com/user", headers=headers)
        if response.status_code != 200:
            return False, f"Token validation failed: {response.status_code}"

        user_data = response.json()
        username = user_data.get("login")

        # Test organization access
        org_response = requests.get(
            f"https://api.github.com/orgs/{org}", headers=headers
        )
        if org_response.status_code == 200:
            msg = f"‚úÖ Access confirmed for org '{org}' as user '{username}'"
            return (True, msg)
        elif org_response.status_code == 404:
            # Might be a user account, check user repos
            user_response = requests.get(
                f"https://api.github.com/users/{org}", headers=headers
            )
            if user_response.status_code == 200:
                msg = f"‚úÖ Access confirmed for user '{org}' as '{username}'"
                return (True, msg)
            else:
                return (
                    False,
                    f"Organization/user '{org}' not found or not accessible",
                )
        else:
            return False, f"Cannot access '{org}': {org_response.status_code}"

    except ImportError:
        return (
            True,
            "‚ö†Ô∏è  Cannot validate access (requests not installed), " "proceeding anyway",
        )
    except Exception as e:
        return False, f"Validation error: {e}"


def get_repository_suggestions(org):
    """Get repository suggestions based on organization."""
    suggestions = {
        "skyral-group": [
            "skyral-group/ee-sdlc",
            "skyral-group/skyral-ee-security-sandbox",
        ],
        "ashmere": ["ashmere/RenovateAgent"],
    }

    return suggestions.get(org, [f"{org}/example-repo"])


def read_existing_env(env_file=".env"):
    """Read existing .env file and extract key values."""
    env_vars = {}
    if os.path.exists(env_file):
        with open(env_file, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    # Remove quotes if present
                    value = value.strip("\"'")
                    env_vars[key] = value
    return env_vars


def create_env_file(token, org, test_repos=None, mode="docker", env_file=".env"):
    """Create environment file for specified mode."""

    if mode == "docker":
        env_content = f"""# RenovateAgent Docker Compose Configuration
# Generated by local_setup.py on {subprocess.check_output(['date', '+%Y-%m-%d']).decode().strip()}

# Deployment mode
DEPLOYMENT_MODE=standalone

# GitHub Configuration
GITHUB_ORGANIZATION={org}
GITHUB_PERSONAL_ACCESS_TOKEN={token}
GITHUB_API_URL=https://api.github.com

# Operation Mode (Polling only for standalone)
ENABLE_WEBHOOKS=false
ENABLE_POLLING=true

# Polling Configuration (Optimized for Development)
POLLING_INTERVAL_SECONDS=60
POLLING_MAX_CONCURRENT_REPOS=3
POLLING_REPOSITORIES={test_repos or ''}

# Development Optimizations
POLLING_ADAPTIVE=true
POLLING_ENABLE_DELTA_DETECTION=true
POLLING_ENABLE_CACHING=true
POLLING_CACHE_TTL_SECONDS=120

# Rate Limiting (Conservative for development)
GITHUB_API_RATE_LIMIT=5000

# Dependency Fixing
ENABLE_DEPENDENCY_FIXING=true

# Logging and Debug
LOG_LEVEL=DEBUG
DEBUG=true

# Server (for health checks)
HOST=0.0.0.0
PORT=8080
"""
    else:  # native mode
        env_content = f"""# RenovateAgent Native Python Configuration
# Generated by local_setup.py on {subprocess.check_output(['date', '+%Y-%m-%d']).decode().strip()}

# GitHub Authentication
GITHUB_APP_ID=0
GITHUB_PERSONAL_ACCESS_TOKEN={token}
GITHUB_WEBHOOK_SECRET=dev-secret
GITHUB_ORGANIZATION={org}
GITHUB_API_URL=https://api.github.com

# Polling Mode (Phase 2 Optimized for Local Testing)
ENABLE_POLLING=true
POLLING_INTERVAL_SECONDS=120
POLLING_MAX_INTERVAL_SECONDS=600
POLLING_ADAPTIVE=true
POLLING_CONCURRENT_REPOS=5

# Repository Settings
GITHUB_REPOSITORY_ALLOWLIST=
GITHUB_TEST_REPOSITORIES={test_repos or ''}
IGNORE_ARCHIVED_REPOSITORIES=true

# Dependency Fixing
ENABLE_DEPENDENCY_FIXING=true
SUPPORTED_LANGUAGES=python,typescript,go
CLONE_TIMEOUT=300
DEPENDENCY_UPDATE_TIMEOUT=600

# Dashboard
DASHBOARD_ISSUE_TITLE="Renovate PRs Assistant Dashboard"
UPDATE_DASHBOARD_ON_EVENTS=true
DASHBOARD_CREATION_MODE=renovate-only

# Server
HOST=0.0.0.0
PORT=8000
DEBUG=true

# Logging
LOG_LEVEL=INFO
"""

    with open(env_file, "w") as f:
        f.write(env_content)

    return env_content


def create_development_scripts():
    """Create convenience scripts for development."""
    scripts_dir = Path("scripts/dev")
    scripts_dir.mkdir(exist_ok=True)

    # Start development environment
    start_script = scripts_dir / "start.sh"
    start_content = """#!/bin/bash
# Start RenovateAgent development environment

set -e

echo "üöÄ Starting RenovateAgent development environment..."

# Check if .env.local exists, otherwise use .env
if [ -f .env.local ]; then
    ENV_FILE=".env.local"
    echo "üìÑ Using .env.local"
else
    ENV_FILE=".env"
    echo "üìÑ Using .env"
fi

# Start services
docker-compose -f docker-compose.dev.yml --env-file $ENV_FILE up --build

echo "‚úÖ Development environment started"
echo "üìä Health: http://localhost:8080/health"
echo "üìä Logs: docker-compose -f docker-compose.dev.yml logs -f"
echo "üîß Shell: docker-compose -f docker-compose.dev.yml exec renovate-agent sh"
"""

    with open(start_script, "w") as f:
        f.write(start_content)
    os.chmod(start_script, 0o755)

    # Stop development environment
    stop_script = scripts_dir / "stop.sh"
    stop_content = """#!/bin/bash
# Stop RenovateAgent development environment

echo "üõë Stopping RenovateAgent development environment..."
docker-compose -f docker-compose.dev.yml down
echo "‚úÖ Development environment stopped"
"""

    with open(stop_script, "w") as f:
        f.write(stop_content)
    os.chmod(stop_script, 0o755)

    # Development shell
    shell_script = scripts_dir / "shell.sh"
    shell_content = """#!/bin/bash
# Open shell in RenovateAgent development container

docker-compose -f docker-compose.dev.yml exec renovate-agent bash
"""

    with open(shell_script, "w") as f:
        f.write(shell_content)
    os.chmod(shell_script, 0o755)

    # View logs
    logs_script = scripts_dir / "logs.sh"
    logs_content = """#!/bin/bash
# View RenovateAgent development logs

if [ "$1" = "-f" ]; then
    docker-compose -f docker-compose.dev.yml logs -f
else
    docker-compose -f docker-compose.dev.yml logs
fi
"""

    with open(logs_script, "w") as f:
        f.write(logs_content)
    os.chmod(logs_script, 0o755)

    # Test script
    test_script = scripts_dir / "test.sh"
    test_content = """#!/bin/bash
# Run tests in development environment

echo "üß™ Running tests in development environment..."
docker-compose -f docker-compose.dev.yml exec renovate-agent \
    python -m pytest tests/ -v
"""

    with open(test_script, "w") as f:
        f.write(test_content)
    os.chmod(test_script, 0o755)

    print(f"‚úÖ Development scripts created in {scripts_dir}")


def check_dependencies(mode="docker"):
    """Check if required dependencies are installed."""
    missing = []

    if mode == "docker":
        # Check Docker
        try:
            subprocess.run(["docker", "--version"], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Docker")

        # Check Docker Compose
        try:
            subprocess.run(
                ["docker", "compose", "version"], capture_output=True, check=True
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Docker Compose")
    else:
        # Check Poetry for native mode
        try:
            subprocess.run(["poetry", "--version"], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Poetry")

    # Check Git (always needed)
    try:
        subprocess.run(["git", "--version"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        missing.append("Git")

    if missing:
        print(f"‚ùå Missing prerequisites: {', '.join(missing)}")
        if "Docker" in missing:
            print("   Install Docker: https://docs.docker.com/get-docker/")
        if "Docker Compose" in missing:
            print("   Docker Compose should be included with Docker Desktop")
        if "Poetry" in missing:
            print("   Install Poetry: https://python-poetry.org/docs/")
        return False

    print("‚úÖ All prerequisites found")
    return True


def interactive_setup():
    """Run interactive setup to gather configuration."""
    print("üîß Interactive RenovateAgent Development Setup")
    print("=" * 50)

    config = {}

    # Choose mode
    print("\nChoose development mode:")
    print("1. Docker Compose (recommended) - Complete isolated environment")
    print("2. Native Python - Direct poetry/python execution")

    mode_choice = input("Enter choice [1]: ").strip() or "1"
    config["mode"] = "docker" if mode_choice == "1" else "native"

    # GitHub organization
    config["github_org"] = input("Enter your GitHub organization name: ").strip()

    # GitHub token
    print("\nYou need a GitHub Personal Access Token with permissions:")
    print("  - repo (full control)")
    print("  - admin:org (read access)")
    print("  - user:email (read access)")
    print("\nCreate one at: https://github.com/settings/tokens")

    config["github_token"] = input(
        "\nEnter your GitHub Personal Access Token: "
    ).strip()

    # Repositories
    org = config["github_org"]
    print(f"\nWhich repositories in {org} should be monitored?")
    print("Format: repo1,repo2,repo3 or leave empty to use defaults")

    repositories = input("Repositories (optional): ").strip()
    if repositories:
        # Format repositories with organization if needed
        formatted_repos = []
        for repo in repositories.split(","):
            repo = repo.strip()
            if "/" not in repo:
                repo = f"{config['github_org']}/{repo}"
            formatted_repos.append(repo)
        config["repositories"] = ",".join(formatted_repos)
    else:
        suggested_repos = get_repository_suggestions(org)
        config["repositories"] = ",".join(suggested_repos)

    return config


def main():
    """Main setup function."""
    parser = argparse.ArgumentParser(
        description="Setup local development environment for RenovateAgent"
    )
    parser.add_argument(
        "--non-interactive",
        action="store_true",
        help="Run in non-interactive mode (auto-updates existing .env safely)",
    )
    parser.add_argument(
        "--mode",
        choices=["docker", "native"],
        default="docker",
        help="Development mode: docker (recommended) or native",
    )
    parser.add_argument("--github-org", help="GitHub organization name")
    parser.add_argument("--github-token", help="GitHub personal access token")
    parser.add_argument(
        "--repositories", help="Comma-separated list of repositories to monitor"
    )
    args = parser.parse_args()

    print("üöÄ RenovateAgent - Comprehensive Development Setup")
    if args.non_interactive:
        print("ü§ñ Running in non-interactive mode")
    print("=" * 50)

    # Check if we're in the right directory
    if not Path("src/renovate_agent").exists():
        print("‚ùå Please run this script from the project root directory")
        sys.exit(1)

    # Check dependencies
    if not check_dependencies(args.mode):
        sys.exit(1)

    # Get configuration
    if args.non_interactive:
        # Non-interactive mode: use existing .env or args
        existing_vars = read_existing_env()
        config = {
            "mode": args.mode,
            "github_org": args.github_org
            or existing_vars.get("GITHUB_ORGANIZATION", ""),
            "github_token": args.github_token
            or existing_vars.get("GITHUB_PERSONAL_ACCESS_TOKEN", ""),
            "repositories": args.repositories
            or existing_vars.get("POLLING_REPOSITORIES", "")
            or existing_vars.get("GITHUB_TEST_REPOSITORIES", ""),
        }

        if not config["github_org"] or not config["github_token"]:
            print("‚ùå Non-interactive mode requires existing configuration")
            print("   or --github-org and --github-token arguments")
            sys.exit(1)
    else:
        config = interactive_setup()

    # Validate GitHub access
    print(f"\nüîí Validating access to '{config['github_org']}'...")
    is_valid, message = validate_github_access(
        config["github_token"], config["github_org"]
    )
    print(f"   {message}")

    if not is_valid:
        print("‚ùå Access validation failed.")
        print("   Please check your token permissions and organization name.")
        sys.exit(1)

    # Create environment file
    env_file = ".env.local" if config["mode"] == "docker" else ".env"
    print(f"\nüìÑ Creating {env_file} for {config['mode']} mode...")

    create_env_file(
        config["github_token"],
        config["github_org"],
        config["repositories"],
        config["mode"],
        env_file,
    )

    print(f"‚úÖ Created {env_file}")
    print("üìã Configuration summary:")
    print(f"   Mode: {config['mode']}")
    print(f"   Organization: {config['github_org']}")
    print(f"   Repositories: {config['repositories']}")
    print(f"   Token: {config['github_token'][:10]}...")

    # Create development scripts for Docker mode
    if config["mode"] == "docker":
        create_development_scripts()

    # Print next steps
    print("\nüéâ Setup complete!")
    print("\nüìã Next steps:")

    if config["mode"] == "docker":
        print("   1. Start the development environment:")
        print("      ./scripts/dev/start.sh")
        print("   2. Monitor logs:")
        print("      ./scripts/dev/logs.sh -f")
        print("   3. Check health:")
        print("      curl http://localhost:8080/health")
        print("   4. Open shell:")
        print("      ./scripts/dev/shell.sh")
        print("   5. Stop environment:")
        print("      ./scripts/dev/stop.sh")
    else:
        print("   1. Install dependencies:")
        print("      poetry install")
        print("   2. Install pre-commit hooks:")
        print("      poetry run pre-commit install")
        print("   3. Run tests:")
        print("      poetry run pytest")
        print("   4. Test GitHub connection:")
        print("      poetry run python scripts/test_github_connection.py")
        print("   5. Start the server:")
        print("      poetry run python -m renovate_agent.main")

    print("\nüìñ For more information, see LOCAL_TESTING.md")


if __name__ == "__main__":
    main()
