#!/usr/bin/env python3
"""
Local development setup script for Renovate PR Assistant.

This script helps set up local testing environment using GitHub CLI
authentication
or guides you through creating a Personal Access Token.
"""

import os
import subprocess
import sys
from pathlib import Path


def get_github_token_from_cli():
    """Get GitHub token from gh CLI if available."""
    try:
        result = subprocess.run(
            ["gh", "auth", "token"], capture_output=True, text=True, check=True
        )
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None


def validate_github_access(token, org):
    """Validate GitHub token and organization access."""
    try:
        import requests

        headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json",
        }

        # Test basic authentication
        response = requests.get("https://api.github.com/user", headers=headers)
        if response.status_code != 200:
            return False, f"Token validation failed: {response.status_code}"

        user_data = response.json()
        username = user_data.get("login")

        # Test organization access
        org_response = requests.get(
            f"https://api.github.com/orgs/{org}", headers=headers
        )
        if org_response.status_code == 200:
            return (
                True,
                f"‚úÖ Access confirmed for organization '{org}' as user '{username}'",
            )
        elif org_response.status_code == 404:
            # Might be a user account, check user repos
            user_response = requests.get(
                f"https://api.github.com/users/{org}", headers=headers
            )
            if user_response.status_code == 200:
                return (
                    True,
                    f"‚úÖ Access confirmed for user account '{org}' as user '{username}'",
                )
            else:
                return (
                    False,
                    f"Organization/user '{org}' not found or not accessible",
                )
        else:
            return False, f"Cannot access '{org}': {org_response.status_code}"

    except ImportError:
        return (
            True,
            "‚ö†Ô∏è  Cannot validate access (requests not installed), proceeding anyway",
        )
    except Exception as e:
        return False, f"Validation error: {e}"


def get_repository_suggestions(org):
    """Get repository suggestions based on organization."""
    suggestions = {
        "skyral-group": [
            "skyral-group/ee-sdlc",
            "skyral-group/skyral-ee-security-sandbox",
        ],
        "ashmere": ["ashmere/RenovateAgent"],
    }

    return suggestions.get(org, [f"{org}/example-repo"])


def create_env_file(token, org, test_repos=None):
    """Create .env file for local development."""

    # Get repository suggestions if none provided
    if not test_repos:
        suggested_repos = get_repository_suggestions(org)
        test_repos = ",".join(suggested_repos)

    env_content = f"""# Local development configuration for Renovate PR Assistant
# Generated by local_setup.py

# GitHub Authentication (Personal Access Token mode for development)
GITHUB_APP_ID=0
GITHUB_APP_PRIVATE_KEY_PATH=""
GITHUB_WEBHOOK_SECRET=dev-secret
GITHUB_PERSONAL_ACCESS_TOKEN={token}
GITHUB_ORGANIZATION={org}

# Server Configuration
HOST=0.0.0.0
PORT=8000
DEBUG=true

# Logging Configuration
LOG_LEVEL=DEBUG
LOG_FORMAT=pretty

# Dashboard Configuration
# Options: test, any, none, renovate-only (default)
# - test: Create dashboard for any PR in test repositories
# - any: Create dashboard for any PR in any repository
# - none: Never create dashboard automatically
# - renovate-only: Only create dashboard for actual Renovate PRs (default behavior)
DASHBOARD_CREATION_MODE=renovate-only

# Dependency Fixing Configuration
ENABLE_DEPENDENCY_FIXING=true
SUPPORTED_LANGUAGES=python,typescript,go

# Test Repository Configuration (used when DASHBOARD_CREATION_MODE=test)
# Format: org/repo1,org/repo2 (comma-separated, no spaces)
GITHUB_TEST_REPOSITORIES={test_repos}

# Rate Limiting (adjust if you hit GitHub API limits)
GITHUB_API_RATE_LIMIT=5000
WEBHOOK_RATE_LIMIT=1000

# Security (CORS configuration for development)
ALLOWED_ORIGINS=https://github.com
ENABLE_CORS=true
"""

    with open(".env", "w") as f:
        f.write(env_content)

    print("‚úÖ Created .env file for local development")
    print("üìã Configuration summary:")
    print(f"   Organization: {org}")
    print(f"   Test repositories: {test_repos}")
    print(f"   Token: {token[:10]}...")


def check_dependencies():
    """Check if required dependencies are installed."""
    try:
        subprocess.run(["poetry", "--version"], capture_output=True, check=True)
        print("‚úÖ Poetry is installed")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Poetry not found. Install it from: https://python-poetry.org/docs/")
        return False

    try:
        subprocess.run(["direnv", "--version"], capture_output=True, check=True)
        print("‚úÖ direnv is installed")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è  direnv not found. Install it for automatic environment loading:")
        print("   brew install direnv  # on macOS")
        print("   apt install direnv   # on Ubuntu")

    return True


def main():
    """Main setup function."""
    print("üöÄ Renovate PR Assistant - Local Development Setup")
    print("=" * 50)

    # Check if we're in the right directory
    if not Path("src/renovate_agent").exists():
        print("‚ùå Please run this script from the project root directory")
        sys.exit(1)

    # Check dependencies
    if not check_dependencies():
        sys.exit(1)

    # Try to get token from gh CLI
    print("\nüîç Checking for GitHub CLI authentication...")
    token = get_github_token_from_cli()

    if token:
        print("‚úÖ Found GitHub CLI token!")
        print(f"   Token: {token[:10]}...")
    else:
        print("‚ùå No GitHub CLI token found.")
        print("\nüìù To set up GitHub CLI authentication:")
        print("   1. Run: gh auth login")
        print("   2. Follow the prompts")
        print("   3. Run this script again")
        print("\nüîó Or create a Personal Access Token manually:")
        print("   1. Go to: https://github.com/settings/tokens")
        print("   2. Click 'Generate new token (classic)'")
        print("   3. Select scopes: repo, read:org, read:user, write:issues")
        print("   4. Copy the token and run:")
        print("      export GITHUB_TOKEN=your_token_here")
        print("      python scripts/local_setup.py")

        # Check for manual token
        manual_token = os.getenv("GITHUB_TOKEN")
        if manual_token:
            token = manual_token
            print(f"\n‚úÖ Using manually provided token: {token[:10]}...")
        else:
            sys.exit(1)

    # Get organization
    print("\nüè¢ Organization Setup")
    org = input("Enter your GitHub organization/username for testing: ").strip()
    if not org:
        print("‚ùå Organization is required")
        sys.exit(1)

    # Validate GitHub access
    print(f"\nüîí Validating access to '{org}'...")
    is_valid, message = validate_github_access(token, org)
    print(f"   {message}")

    if not is_valid:
        print(
            "‚ùå Access validation failed. Please check your token permissions and organization name."
        )
        sys.exit(1)

    # Get test repositories
    print(f"\nüìö Test Repository Setup")
    suggested_repos = get_repository_suggestions(org)
    print("Suggested test repositories:")
    for repo in suggested_repos:
        print(f"   - {repo}")

    use_suggested = input(f"\nUse suggested repositories? [Y/n]: ").strip().lower()
    if use_suggested in ["", "y", "yes"]:
        test_repos = ",".join(suggested_repos)
    else:
        print("Enter test repositories (format: org/repo1,org/repo2):")
        test_repos = input("Test repositories: ").strip()
        if not test_repos:
            test_repos = ",".join(suggested_repos)
            print(f"Using default: {test_repos}")

    # Create .env file
    print(f"\nüìÑ Creating .env file...")
    create_env_file(token, org, test_repos)

    print("\nüéâ Setup complete!")
    print("\nüìã Next steps:")
    print("   1. Install dependencies: poetry install")
    print("   2. Install pre-commit hooks: poetry run pre-commit install")
    print("   3. Run tests: poetry run pytest")
    print(
        "   4. Test GitHub connection: poetry run python scripts/test_github_connection.py"
    )
    print(
        "   5. Test target repositories: poetry run python scripts/test_target_repos.py"
    )
    print("   6. Start the server: poetry run python -m renovate_agent.main")
    print("\nüîó Useful endpoints:")
    print("   ‚Ä¢ Health check: http://localhost:8000/health")
    print("   ‚Ä¢ API docs: http://localhost:8000/docs")
    print("   ‚Ä¢ Webhook endpoint: http://localhost:8000/webhooks/github")
    print("\nüìñ For more information, see LOCAL_TESTING.md")


if __name__ == "__main__":
    main()
