#!/usr/bin/env python3
"""
Developer Environment Setup Script for RenovateAgent.

This script helps developers quickly set up a local development environment
for RenovateAgent standalone mode with Docker Compose.
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List


class DevEnvironmentSetup:
    """Setup manager for RenovateAgent development environment."""

    def __init__(self, project_root: Path):
        """Initialize the setup manager."""
        self.project_root = project_root
        self.env_file = project_root / ".env.local"
        self.docker_compose_file = project_root / "docker-compose.dev.yml"

    def check_prerequisites(self) -> List[str]:
        """Check system prerequisites and return any missing items."""
        missing = []

        # Check Docker
        try:
            subprocess.run(["docker", "--version"], check=True, capture_output=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Docker")

        # Check Docker Compose
        try:
            subprocess.run(
                ["docker", "compose", "version"], check=True, capture_output=True
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Docker Compose")

        # Check Git
        try:
            subprocess.run(["git", "--version"], check=True, capture_output=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append("Git")

        return missing

    def create_env_file(self, config: Dict[str, str]) -> None:
        """Create .env.local file with development configuration."""
        print("📝 Creating environment file: {}".format(self.env_file))

        env_content = [
            "# RenovateAgent Standalone Development Configuration",
            "# Generated by setup_dev_environment.py",
            "",
            "# Deployment mode",
            "DEPLOYMENT_MODE=standalone",
            "",
            "# GitHub Configuration",
            "GITHUB_ORGANIZATION={}".format(config.get("github_org", "")),
            "GITHUB_PERSONAL_ACCESS_TOKEN={}".format(config.get("github_token", "")),
            "GITHUB_API_URL=https://api.github.com",
            "",
            "# Operation Mode (Polling only for standalone)",
            "ENABLE_WEBHOOKS=false",
            "ENABLE_POLLING=true",
            "",
            "# Polling Configuration (Optimized for Development)",
            "POLLING_INTERVAL_MINUTES=1",
            "POLLING_MAX_CONCURRENT_REPOS=3",
            "POLLING_REPOSITORIES={}".format(config.get("repositories", "")),
            "",
            "# Development Optimizations",
            "POLLING_ENABLE_ADAPTIVE_INTERVALS=true",
            "POLLING_ENABLE_DELTA_DETECTION=true",
            "POLLING_ENABLE_CACHING=true",
            "POLLING_CACHE_TTL_SECONDS=120",
            "",
            "# Rate Limiting (Conservative for development)",
            "GITHUB_API_RATE_LIMIT=5000",
            "POLLING_RATE_LIMIT_BUFFER=500",
            "POLLING_RATE_LIMIT_THRESHOLD=0.7",
            "",
            "# Dependency Fixing",
            "DEPENDENCY_FIXER_ENABLED=true",
            "DEPENDENCY_FIXER_AUTO_APPROVE=false",
            "",
            "# Logging and Debug",
            "LOG_LEVEL=DEBUG",
            "LOG_FORMAT=json",
            "DEBUG=true",
            "DEVELOPMENT_MODE=true",
            "",
            "# Optional: GitHub App Configuration (uncomment if using)",
            "# GITHUB_APP_ID=",
            "# GITHUB_APP_PRIVATE_KEY_PATH=./github-app-key.pem",
            "",
            "# Optional: Redis Configuration",
            "# REDIS_URL=redis://localhost:6379/0",
        ]

        with open(self.env_file, "w") as f:
            f.write("\n".join(env_content))

        print("✅ Environment file created: {}".format(self.env_file))

    def create_scripts(self) -> None:
        """Create convenience scripts for development."""
        scripts_dir = self.project_root / "scripts" / "dev"
        scripts_dir.mkdir(exist_ok=True)

        # Start development environment
        start_script = scripts_dir / "start.sh"
        start_content = """#!/bin/bash
# Start RenovateAgent development environment

set -e

echo "🚀 Starting RenovateAgent development environment..."

# Load environment variables
if [ -f .env.local ]; then
    export $(cat .env.local | grep -v '^#' | xargs)
fi

# Start services
docker compose -f docker-compose.dev.yml up --build

echo "✅ Development environment started"
echo "📊 Logs: docker compose -f docker-compose.dev.yml logs -f"
echo "🔧 Shell: docker compose -f docker-compose.dev.yml exec \
    renovate-agent bash"
"""

        with open(start_script, "w") as f:
            f.write(start_content)
        os.chmod(start_script, 0o755)

        # Stop development environment
        stop_script = scripts_dir / "stop.sh"
        stop_content = """#!/bin/bash
# Stop RenovateAgent development environment

echo "🛑 Stopping RenovateAgent development environment..."
docker compose -f docker-compose.dev.yml down
echo "✅ Development environment stopped"
"""

        with open(stop_script, "w") as f:
            f.write(stop_content)
        os.chmod(stop_script, 0o755)

        # Development shell
        shell_script = scripts_dir / "shell.sh"
        shell_content = """#!/bin/bash
# Open shell in RenovateAgent development container

docker compose -f docker-compose.dev.yml exec renovate-agent bash
"""

        with open(shell_script, "w") as f:
            f.write(shell_content)
        os.chmod(shell_script, 0o755)

        # View logs
        logs_script = scripts_dir / "logs.sh"
        logs_content = """#!/bin/bash
# View RenovateAgent development logs

if [ "$1" = "-f" ]; then
    docker compose -f docker-compose.dev.yml logs -f
else
    docker compose -f docker-compose.dev.yml logs
fi
"""

        with open(logs_script, "w") as f:
            f.write(logs_content)
        os.chmod(logs_script, 0o755)

        # Test script
        test_script = scripts_dir / "test.sh"
        test_content = """#!/bin/bash
# Run tests in development environment

echo "🧪 Running tests in development environment..."
docker compose -f docker-compose.dev.yml exec renovate-agent \
    python -m pytest tests/ -v
"""

        with open(test_script, "w") as f:
            f.write(test_content)
        os.chmod(test_script, 0o755)

        print("✅ Development scripts created in {}".format(scripts_dir))

    def validate_configuration(self, config: Dict[str, str]) -> List[str]:
        """Validate the provided configuration."""
        errors = []

        if not config.get("github_org"):
            errors.append("GitHub organization is required")

        if not config.get("github_token"):
            errors.append("GitHub personal access token is required")

        # Validate repositories format if provided
        repos = config.get("repositories", "")
        if repos:
            for repo in repos.split(","):
                repo = repo.strip()
                if "/" not in repo:
                    errors.append(
                        "Invalid repository format: {} "
                        "(should be 'owner/repo')".format(repo)
                    )

        return errors

    def interactive_setup(self) -> Dict[str, str]:
        """Run interactive setup to gather configuration."""
        print("🔧 Interactive RenovateAgent Development Setup")
        print("=" * 50)

        config = {}

        # GitHub organization
        config["github_org"] = input("Enter your GitHub organization name: ").strip()

        # GitHub token
        print("\nYou need a GitHub Personal Access Token with permissions:")
        print("  - repo (full control)")
        print("  - admin:org (read access)")
        print("  - user:email (read access)")
        print("\nCreate one at: https://github.com/settings/tokens")

        config["github_token"] = input(
            "\nEnter your GitHub Personal Access Token: "
        ).strip()

        # Repositories
        org = config["github_org"]
        print("\nWhich repositories in {} should be monitored?".format(org))
        print("Format: repo1,repo2,repo3 or leave empty to monitor all")

        repositories = input("Repositories (optional): ").strip()
        if repositories:
            # Format repositories with organization
            formatted_repos = []
            for repo in repositories.split(","):
                repo = repo.strip()
                if "/" not in repo:
                    repo = "{}/{}".format(config["github_org"], repo)
                formatted_repos.append(repo)
            config["repositories"] = ",".join(formatted_repos)
        else:
            config["repositories"] = ""

        return config

    def print_next_steps(self) -> None:
        """Print next steps for the developer."""
        print("\n🎉 Setup Complete!")
        print("=" * 50)
        print("\nNext steps:")
        print("1. Review and edit .env.local if needed")
        print("2. Start the development environment:")
        print("   ./scripts/dev/start.sh")
        print("\n3. Useful commands:")
        print("   ./scripts/dev/logs.sh     # View logs")
        print("   ./scripts/dev/shell.sh    # Open shell")
        print("   ./scripts/dev/test.sh     # Run tests")
        print("   ./scripts/dev/stop.sh     # Stop environment")
        print("\n4. Monitor the application:")
        print("   - Health: http://localhost:8080/health")
        print("   - Redis: http://localhost:6379")
        print("   - Prometheus: http://localhost:9090 (if enabled)")
        print("   - Grafana: http://localhost:3000 (if enabled)")
        print("\n5. View application logs:")
        logs_cmd = "docker compose -f docker-compose.dev.yml logs -f " "renovate-agent"
        print("   {}".format(logs_cmd))
        print("\n📚 Documentation:")
        print("   - Architecture: docs/architecture.md")
        print("   - Serverless Plan: docs/serverless.md")
        print("   - Local Testing: LOCAL_TESTING.md")


def main():
    """Main entry point for the setup script."""
    parser = argparse.ArgumentParser(
        description="Setup RenovateAgent development environment"
    )
    parser.add_argument(
        "--non-interactive",
        action="store_true",
        help="Skip interactive prompts (use existing config)",
    )
    parser.add_argument("--github-org", help="GitHub organization name")
    parser.add_argument("--github-token", help="GitHub personal access token")
    parser.add_argument(
        "--repositories", help="Comma-separated list of repositories to monitor"
    )

    args = parser.parse_args()

    # Find project root
    project_root = Path(__file__).parent.parent
    setup = DevEnvironmentSetup(project_root)

    print("🔧 RenovateAgent Development Environment Setup")
    print("=" * 50)

    # Check prerequisites
    missing = setup.check_prerequisites()
    if missing:
        print("❌ Missing prerequisites: {}".format(", ".join(missing)))
        print("\nPlease install the missing tools and try again.")
        sys.exit(1)

    print("✅ All prerequisites found")

    # Get configuration
    if args.non_interactive:
        config = {
            "github_org": args.github_org or "",
            "github_token": args.github_token or "",
            "repositories": args.repositories or "",
        }
    else:
        config = setup.interactive_setup()

    # Validate configuration
    errors = setup.validate_configuration(config)
    if errors:
        print("\n❌ Configuration errors:")
        for error in errors:
            print("   - {}".format(error))
        sys.exit(1)

    # Create environment file
    setup.create_env_file(config)

    # Create development scripts
    setup.create_scripts()

    # Print next steps
    setup.print_next_steps()


if __name__ == "__main__":
    main()
