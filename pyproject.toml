[tool.poetry]
name = "renovate-agent"
version = "0.3.0"
description = "AI-powered automation for Renovate dependency update PRs"
authors = ["Mat Davies <ashmere@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = ["renovate", "github", "automation", "dependencies", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]
packages = [{include = "renovate_agent", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.116.0"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
PyGithub = "^2.0.0"
httpx = "^0.28.0"
structlog = "^25.0.0"
python-dotenv = "^1.1.1"
cryptography = "^41.0.0"
PyJWT = "^2.10.1"
sqlalchemy = "^2.0.0"
alembic = "^1.16.3"
aiofiles = "^24.0.0"
python-json-logger = "^3.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
ruff = "^0.12.0"
mypy = "^1.16.1"
pre-commit = "^4.0.0"
bandit = "^1.8.6"
isort = "^6.0.0"
types-PyJWT = "^1.7.0"

[tool.poetry.scripts]
renovate-agent = "renovate_agent.main:main"

[tool.poetry.urls]
Homepage = "https://github.com/ashmere/RenovateAgent"
Documentation = "https://github.com/ashmere/RenovateAgent/docs"
Repository = "https://github.com/ashmere/RenovateAgent"
Issues = "https://github.com/ashmere/RenovateAgent/issues"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S104",  # binding to all interfaces (acceptable for server config defaults)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S107", "S108"]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "github.*",
    "structlog.*",
    "uvicorn.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=renovate_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
