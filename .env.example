# Environment Configuration Example for Renovate PR Assistant
# Copy this file to .env and update with your actual values
# DO NOT commit the actual .env file to version control

# =============================================================================
# GitHub Authentication
# =============================================================================

# GitHub App Configuration (Production)
# Create a GitHub App at: https://github.com/settings/apps
GITHUB_APP_ID=123456
GITHUB_APP_PRIVATE_KEY_PATH=/app/private-key.pem
GITHUB_WEBHOOK_SECRET=your-webhook-secret-here

# Personal Access Token (Development/Testing)
# Get token at: https://github.com/settings/tokens
# Required scopes: repo, read:org, read:user, write:issues
GITHUB_PERSONAL_ACCESS_TOKEN=ghp_example

# Organization/User Configuration
GITHUB_ORGANIZATION=your-organization-name

# =============================================================================
# Repository Configuration
# =============================================================================

# Repository Filtering (optional)
# If empty, monitors all accessible repositories
GITHUB_REPOSITORY_ALLOWLIST=repo1,repo2,repo3

# Test Repository Configuration
# Used for local testing and development
# Format: org/repo1,org/repo2 (comma-separated, no spaces)
GITHUB_TEST_REPOSITORIES=your-org/test-repo,your-org/another-test-repo

# =============================================================================
# Server Configuration
# =============================================================================

# Server Binding
HOST=0.0.0.0
PORT=8000

# Environment Mode
DEBUG=true# =============================================================================
# Logging Configuration
# =============================================================================

# Log Level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log Format: pretty (human-readable) or json (structured)
LOG_FORMAT=pretty

# =============================================================================
# Dashboard Configuration
# =============================================================================

# Dashboard Creation Mode
# Options:
#   - renovate-only: Only create dashboards for actual Renovate PRs (default)
#   - test: Create dashboard for any PR in test repositories (development)
#   - any: Create dashboard for any PR in any repository (testing)
#   - none: Never create dashboard automatically
DASHBOARD_CREATION_MODE=renovate-only

# Dashboard Issue Title Template
DASHBOARD_ISSUE_TITLE=ðŸ¤– Renovate PR Assistant Dashboard - {repo_name}

# =============================================================================
# Dependency Fixing Configuration
# =============================================================================

# Enable automatic dependency fixing
ENABLE_DEPENDENCY_FIXING=true

# Supported Languages (comma-separated, no spaces)
# Available: python, typescript, go
SUPPORTED_LANGUAGES=python,typescript,go

# Timeouts (in seconds)
CLONE_TIMEOUT=300
DEPENDENCY_UPDATE_TIMEOUT=600
# =============================================================================
# Rate Limiting Configuration
# =============================================================================

# GitHub API Rate Limit (requests per hour)
# Personal tokens: 5,000/hour
# GitHub Apps: 5,000/hour per installation
GITHUB_API_RATE_LIMIT=5000

# Webhook Rate Limit (requests per hour)
WEBHOOK_RATE_LIMIT=1000

# =============================================================================
# Security Configuration
# =============================================================================

# CORS Configuration
ENABLE_CORS=true
ALLOWED_ORIGINS=https://github.com

# Webhook Security
# Set to false only for local development without ngrok
ENFORCE_WEBHOOK_SIGNATURE=true

# =============================================================================
# Feature Flags
# =============================================================================

# Auto-approve PRs that pass all checks
AUTO_APPROVE_PASSING_PRS=false

# Create comments on PRs with analysis results
CREATE_PR_COMMENTS=true

# Update existing dashboard issues instead of creating new ones
UPDATE_EXISTING_DASHBOARDS=true

# =============================================================================
# Development/Testing Configuration
# =============================================================================

# Development Mode Flags
IS_DEVELOPMENT_MODE=false

# Test Mode Configuration
ENABLE_TEST_MODE=false
TEST_MODE_DRY_RUN=true

# Mock GitHub API for testing (development only)
MOCK_GITHUB_API=false# =============================================================================
# External Service Configuration (Optional)
# =============================================================================

# Slack Notifications (optional)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
# SLACK_CHANNEL=#renovate-notifications

# Email Notifications (optional)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@example.com
# SMTP_PASSWORD=your-app-password
# NOTIFICATION_EMAIL=notifications@your-company.com

# =============================================================================
# Advanced Configuration
# =============================================================================

# Custom GitHub API Base URL (for GitHub Enterprise)
# GITHUB_API_BASE_URL=https://api.github.com

# Custom User Agent
# USER_AGENT=RenovateAgent/1.0.0

# Request Timeout (seconds)
REQUEST_TIMEOUT=30

# Retry Configuration
MAX_RETRIES=3
RETRY_BACKOFF_FACTOR=2

# =============================================================================
# Environment-Specific Examples
# =============================================================================

# Local Development Example:
# GITHUB_APP_ID=0
# GITHUB_PERSONAL_ACCESS_TOKEN=ghp_your_token_here
# GITHUB_ORGANIZATION=your-username
# DEBUG=true
# LOG_LEVEL=DEBUG
# DASHBOARD_CREATION_MODE=test
# GITHUB_TEST_REPOSITORIES=your-username/test-repo

# Production Example:
# GITHUB_APP_ID=123456
# GITHUB_APP_PRIVATE_KEY_PATH=/app/private-key.pem
# GITHUB_WEBHOOK_SECRET=secure-webhook-secret
# GITHUB_ORGANIZATION=your-company
# DEBUG=false
# LOG_LEVEL=INFO
# DASHBOARD_CREATION_MODE=renovate-only
# ENABLE_DEPENDENCY_FIXING=true

# =============================================================================
# Security Notes
# =============================================================================

# 1. Never commit actual secrets to version control
# 2. Use environment variable injection in production (Docker, Kubernetes)
# 3. Rotate tokens and secrets regularly
# 4. Use GitHub Apps for production (better security and rate limits)
# 5. Set ENFORCE_WEBHOOK_SIGNATURE=true in production
# 6. Review and limit ALLOWED_ORIGINS for CORS in production
